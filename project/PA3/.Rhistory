min<-min(as.numeric(FilterState[!is.na(FilterState[,col])&FilterState[,col]!="Not Available",col]));
min
rs_index<-which(FilterState[,col]==min);
rs_index
source("best.R")
rs_index<-which(FilterState[,col]==min);
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
state="TX"
col=11;
FilterState<-data[(data["State"])==state,]
FilterState[FilterState[,col]=="Not Available",col]<-"NA"
FilterState[,col]
FilterState[,col]<-as.numeric(FilterState[,col])
FilterState
FilterState[,col]
min<-min(FilterState[!is.na(FilterState[,col]),col]);
min
rs_index<-which(FilterState[,col]==min);
rs_index
name<-sort(FilterState[rs_index,"Hospital.Name"])[1];
print(min)
name
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
stop('x not between 0 and 1')
source("best.R")
a
1
source("best.R")
source("best.R")
best("TX", "heart attack")
# [1] "CYPRESS FAIRBANKS MEDICAL CENTER"
best("TX", "heart failure")
# [1] "FORT DUNCAN MEDICAL CENTER"
best("MD", "heart attack")
# [1] "JOHNS HOPKINS HOSPITAL, THE"
best("MD", "pneumonia")
# [1] "GREATER BALTIMORE MEDICAL CENTER"
best("BB", "heart attack")
# Error in best("BB", "heart attack") : invalid state
best("NY", "hert attack")
# Error in best("NY", "hert attack") : invalid outcome
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
?rank
rank(c(2,1,5,4))
rank(c(2,1,5,4,NA))
rank(c(2,1,5,4,NA),na.last=TRUE)
rank(c(2,1,5,4,NA),na.last=FALSE)
rank(c(2,1,5,1,4,NA),na.last=FALSE)
rank(c(2,1,5,1,4,NA))
rank(c("z","a","b","a",NA))
(r1 <- rank(x1 <- c(3, 1, 4, 15, 92)))
x2 <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)
names(x2) <- letters[1:11
]
x2
r1 <- rank(x1 <- c(3, 1, 4, 15, 92))
r1
order(c(2,1,4))
order(c(2,1,4,1))
order(c(2,1,5,0,2))
order(c(2,2))
order(c(2,2,3))
order(c(2,2,3))
?order
cbind(c(2,1,1,4),c("z","bb","ba","s"))
z<-cbind(c(2,1,1,4),c("z","bb","ba","s"))
z
order(z[,1],z[,2])
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
state="TX"
outcome="heart failure"
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if(outcome=="heart attack"){
col=11;
} else if(outcome=="heart failure"){
col=17;
} else if(outcome=="pneumonia"){
col=23;
} else  {
stop('invalid outcome')
}
FilterState<-data[(data["State"])==state,]
if(nrow(FilterState)==0)
stop('invalid state')
## Return hospital name in that state with the given rank
## 30-day death rate
# Clean data
FilterState[FilterState[,col]=="Not Available",col]<-"NA"
FilterState[,col]<-as.numeric(FilterState[,col])
na_count=sum(is.na(FilterState[,col]))
if(num=="best"){
rs_rank=1
}else if(num=="worst"){
rs_rank=length(rank)-na_count
}else if(num>length(rank)-na_count){
return(NA);
}
rs_rank=1
rank<-order(FilterState[,col], FilterState[,"Hospital.Name"]);
rank
rs_index<-which(rank==rs_rank)
rs_index
return(FilterState[rs_index,"Hospital.Name"]);
FilterState[rs_index,"Hospital.Name"]
rs_rank=length(rank)-na_count
rs_rank
rs_index<-which(rank==rs_rank)
FilterState[rs_index,"Hospital.Name"]
rs_rank=4
rs_index<-which(rank==rs_rank)
FilterState[rs_index,"Hospital.Name"]
rank
FilterState[12,col]
FilterState[12,]
FilterState[12,col]
state="TX"
outcome="heart failure"
num=4
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if(outcome=="heart attack"){
col=11;
} else if(outcome=="heart failure"){
col=17;
} else if(outcome=="pneumonia"){
col=23;
} else  {
stop('invalid outcome')
}
FilterState<-data[(data["State"])==state,]
FilterState$State
FilterState[FilterState[,col]=="Not Available",col]
FilterState[FilterState[,col]=="Not Available",col]<-"NA"
FilterState[FilterState[,col]=="Not Available",col]
is.na(FilterState[,col]
)
FilterState[,col]
FilterState[,col]<-as.numeric(FilterState[,col])
FilterState[,col]
na_count=sum(is.na(FilterState[,col]))
na_count
if(num=="best"){
rs_rank=1;
}else if(num=="worst"){
rs_rank=length(rank)-na_count;
}else if(num>length(rank)-na_count){
return(NA);
}
num
rank<-order(FilterState[,col], FilterState[,"Hospital.Name"]);
rank
rs_rank=num
rs_index<-which(rank==rs_rank)
FilterState[rs_index,"Hospital.Name"]
rs_index
rank<-order(FilterState[,col])
rank
FilterState[,col]
rs_index<-which(rank<=rs_rank)
FilterState[rs_index,col]
rank
length(rank)
length(FilterState)
dim(FilterState)
rank<-order(FilterState[,col])
rank<=rs_rank
which(rank<=rs_rank)
rs_index<-which(rank<=rs_rank)
FilterState[rs_index,col]
FilterState[which(rank==1),col]
FilterState[which(rank==2),col]
FilterState[which(rank==3),col]
FilterState[which(rank==4),col]
FilterState[which(rank==200),col]
FilterState[,col]
rank<-order(FilterState[,col])
which(rank==1)
rank
class(FilterState[,col])
class(FilterState[1:10,col])
order(FilterState[1:10,col])
FilterState[1:10,col]
FilterState[1:20,col]
order(FilterState[1:20,col])
rank<-order(FilterState[,col], FilterState$Hospital.Name);
rank
state="TX"
outcome="heart failure"
num=4
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(outcome=="heart attack"){
col=11;
} else if(outcome=="heart failure"){
col=17;
} else if(outcome=="pneumonia"){
col=23;
} else  {
stop('invalid outcome')
}
FilterState<-data[(data["State"])==state,]
if(nrow(FilterState)==0)
stop('invalid state')
FilterState<-FilterState[!FilterState[,col]=="Not Available",]
FilterState[,col]<-as.numeric(FilterState[,col])
if(num=="best"){
rs_rank=1;
}else if(num=="worst"){
rs_rank=length(FilterState);
}else if(num>length(FilterState)){
return(NA);
}else{
rs_rank=num;
}
rank<-order(FilterState[,col], FilterState$Hospital.Name);
rank
FilterState[which(rank==1),col]
FilterState[1,col]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
state="TX"
outcome="heart failure"
num=4
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(outcome=="heart attack"){
col=11;
} else if(outcome=="heart failure"){
col=17;
} else if(outcome=="pneumonia"){
col=23;
} else  {
stop('invalid outcome')
}
FilterState<-data[(data["State"])==state,]
if(nrow(FilterState)==0)
stop('invalid state')
## Return hospital name in that state with the given rank
## 30-day death rate
# Clean data
FilterState<-FilterState[!FilterState[,col]=="Not Available",]
FilterState
FilterState[,col]
FilterState[,col]<-as.numeric(FilterState[,col])
if(num=="best"){
rs_rank=1;
}else if(num=="worst"){
rs_rank=length(FilterState);
}else if(num>length(FilterState)){
return(NA);
}else{
rs_rank=num;
}
FilterState[,col]
order(FilterState[,col], FilterState$Hospital.Name);
FilterState[,col]
rs<-FilterState[order(FilterState[,col], FilterState$Hospital.Name)];
rs<-FilterState[order(FilterState[,col], FilterState$Hospital.Name),];
View(rs)
View(rs)
return(rs[rs_rank,"Hospital.Name"]);
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
state="MD"
col=11;
FilterState<-data[(data["State"])==state,]
if(nrow(FilterState)==0)
stop('invalid state')
FilterState<-FilterState[!FilterState[,col]=="Not Available",]
FilterState[,col]<-as.numeric(FilterState[,col])
rs<-FilterState[order(FilterState[,col], FilterState$Hospital.Name),];
if(num=="best"){
rs_rank=1;
}else if(num=="worst"){
rs_rank=length(rs);
}else if(num>length(rs)){
return(NA);
}else{
rs_rank=num;
}
rs_rank
rs_rank=dim(rs,1);
dim(rs)
dim(rs)[1]
if(num=="best"){
rs_rank=1;
}else if(num=="worst"){
rs_rank=dim(rs)[1];
}else if(num>dim(rs)[1]){
return(NA);
}else{
rs_rank=num;
}
rs[rs_rank,"Hospital.Name"]
View(rs)
View(rs)
rs_rank=dim(rs)[1];
rs[rs_rank,"Hospital.Name"]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
col=11;
unique(data[,col]);
unique(data$State);
s in state
s %in% state
?loop
?for
loop
for (1:10)
for (s in 1:10)
print(s)
state<-unique(data$State);
for (s in state)
print(s)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
length(state)
rep(NA, length(state))
rs.df = data.frame( hospital <- rep(NA, length(state)), ), state)
rs.df = data.frame( hospital <- rep(NA, length(state))), state)
rs.df = data.frame( hospital <- rep(NA, length(state)), state)
View(rs.df)
View(rs.df)
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
col=11;
num = "best"
state<-unique(data$State);
rs.df = data.frame( "hospital" = rep(NA, length(state)), state)
for (s in state){
}
s="AL"
FilterState<-data[(data[,"State"])==s,]
# clean NA
FilterState<-FilterState[!FilterState[,col]=="Not Available",]
FilterState[,col]<-as.numeric(FilterState[,col])
View(FilterState)
View(FilterState)
FilterState
rs<-FilterState[order(FilterState[,col], FilterState$Hospital.Name),];
if(num=="best"){
rs_rank=1;
}else if(num=="worst"){
rs_rank=dim(rs)[1];
}else if(num>dim(rs)[1]){
}else{
rs_rank=num;
}
rs.df[,"state"==s]
rs.df[,"state"==s]
head(rs.df)
rs.df$state==s
rs.df[,rs.df$state==s]
rs.df[rs.df$state==s]
rs.df[rs.df$state==s,1]
rs.df[rs.df$state==s,2]
rs[rs_rank,"Hospital.Name"]
rs.df[rs.df$state==s,1] = rs[rs_rank,"Hospital.Name"];
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
#######
## cachematrix.r
##
## brainvat
## https://github.com/brainvat/ProgrammingAssignment2
##
## Reference material:
##
## The Inverse of a Square Matrix
## https://people.richland.edu/james/lecture/m116/matrices/inverses.html
##
## Gauss Jordan Elimination Through Pivoting
## https://people.richland.edu/james/lecture/m116/matrices/pivot.html
##
#######
##
## makeCacheMatrix (matrix)
##
##    a constructor function that takes a matrix as
##    input and returns an object with ivars for
##    the original matrix as well as its inverse
##
##    methods:
##
##    $get() - getter method for the matrix
##    $set() - setter method for the matrix
##    $getinverse() - getter method for the inverse
##    $setinverse() - setter method for the inverse
##
##
#######
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#######
##
## cacheSolve (cachematrix)
##
##   returns the inverse of the square invertible
##   matrix created with makeCacheMatrix
##
##
#######
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## example
##
## mx <- makeCacheMatrix(matrix(c(1,-1,1,2), nrow=2, ncol=2))
## cacheSolve(mx)
##
##         		 [,1]       [,2]
## [1,] 0.6666667 -0.3333333
## [2,] 0.3333333  0.3333333
##
# convert to cachematrix if it is a square matrix
cm <- x
if ((class(x) == "matrix") && (nrow(x) == ncol(x))) {
cm <- makeCacheMatrix(x)
}
# retrieve, calculate, and/or store inverse if this is a cachematrix
if ((class(cm) == "list") && identical(names(cm), c("set","get","setinverse","getinverse"))) {
m <- cm$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- cm$get()
m <- solve(data, ...)
cm$setinverse(m)
m
} else {
message("Usage: cacheSolve(m) where m is a square matrix or cachematrix")
return(matrix())
}
}
a<-matrix(c(1,0,0,0,1,0,0,0,1),3,3)
a
makeCacheMatrix(a)
b<-makeCacheMatrix(a)
b
b<-makeCacheMatrix$set(a)
a<-matrix(c(1,1,0,0,1,0,0,0,1),3,3)
z<-makeCacheMatrix(a)
cacheSolve(z)
inv<-matrix(c(1,0,0,-1,1,0,0,0,1),3,3)
z$setinverse(inv)
cacheSolve(z)
